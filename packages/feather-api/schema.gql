# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Client {
  id: ID!
  firstName: String!
  lastName: String!
  dateOfBirth: DateTime
  active: Boolean!
  createdBy: String!
  updatedBy: String!
  deletedBy: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  membershipsAggregate(
    """Filter to find records to aggregate on"""
    filter: MembershipAggregateFilter
  ): ClientMembershipsAggregateResponse!
  memberships(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: MembershipFilter = {}

    """Specify to sort results."""
    sorting: [MembershipSort!] = []
  ): ClientMembershipsConnection
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input MembershipAggregateFilter {
  and: [MembershipAggregateFilter!]
  or: [MembershipAggregateFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  userName: StringFieldComparison
  phoneNumber: StringFieldComparison
  magicToken: StringFieldComparison
  clientId: StringFieldComparison
  lastLogin: DateFieldComparison
  active: BooleanFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
  deletedBy: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input MembershipFilter {
  and: [MembershipFilter!]
  or: [MembershipFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  userName: StringFieldComparison
  phoneNumber: StringFieldComparison
  magicToken: StringFieldComparison
  clientId: StringFieldComparison
  lastLogin: DateFieldComparison
  active: BooleanFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
  deletedBy: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  client: MembershipFilterClientFilter
}

input MembershipFilterClientFilter {
  and: [MembershipFilterClientFilter!]
  or: [MembershipFilterClientFilter!]
  id: IDFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  dateOfBirth: DateFieldComparison
  active: BooleanFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
  deletedBy: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input MembershipSort {
  field: MembershipSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum MembershipSortFields {
  id
  email
  userName
  phoneNumber
  magicToken
  clientId
  lastLogin
  active
  createdBy
  updatedBy
  deletedBy
  createdAt
  updatedAt
  deletedAt
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Membership {
  id: ID!
  email: String!
  userName: String!
  phoneNumber: String!
  magicToken: String
  clientId: String
  lastLogin: DateTime
  active: Boolean!
  createdBy: String!
  updatedBy: String!
  deletedBy: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  client: Client
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type MembershipCountAggregate {
  id: Int
  email: Int
  userName: Int
  phoneNumber: Int
  magicToken: Int
  clientId: Int
  lastLogin: Int
  active: Int
  createdBy: Int
  updatedBy: Int
  deletedBy: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type MembershipMinAggregate {
  id: ID
  email: String
  userName: String
  phoneNumber: String
  magicToken: String
  clientId: String
  lastLogin: DateTime
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type MembershipMaxAggregate {
  id: ID
  email: String
  userName: String
  phoneNumber: String
  magicToken: String
  clientId: String
  lastLogin: DateTime
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ClientCountAggregate {
  id: Int
  firstName: Int
  lastName: Int
  dateOfBirth: Int
  active: Int
  createdBy: Int
  updatedBy: Int
  deletedBy: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ClientMinAggregate {
  id: ID
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ClientMaxAggregate {
  id: ID
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ClientMembershipsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Membership!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ClientMembershipsCountAggregate {
  id: Int
  email: Int
  userName: Int
  phoneNumber: Int
  magicToken: Int
  clientId: Int
  lastLogin: Int
  active: Int
  createdBy: Int
  updatedBy: Int
  deletedBy: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ClientMembershipsMinAggregate {
  id: ID
  email: String
  userName: String
  phoneNumber: String
  magicToken: String
  clientId: String
  lastLogin: DateTime
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ClientMembershipsMaxAggregate {
  id: ID
  email: String
  userName: String
  phoneNumber: String
  magicToken: String
  clientId: String
  lastLogin: DateTime
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ClientMembershipsAggregateResponse {
  count: ClientMembershipsCountAggregate
  min: ClientMembershipsMinAggregate
  max: ClientMembershipsMaxAggregate
}

type SignupResponse {
  magicToken: String!
}

type LoginResponse {
  magicToken: String!
}

type AuthorizeResponse {
  accessToken: String!
}

type Insurance {
  id: ID!
  name: String!
  type: String!
  public: Boolean!
  cost: Float!
  frequency: String!
  description: String!
  createdBy: String!
  updatedBy: String!
  deletedBy: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type DeleteOneResponse {
  status: String!
}

type InsuranceConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Insurance!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InsuranceCountAggregate {
  id: Int
  name: Int
  type: Int
  public: Int
  cost: Int
  frequency: Int
  description: Int
  createdBy: Int
  updatedBy: Int
  deletedBy: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type InsuranceSumAggregate {
  cost: Float
}

type InsuranceAvgAggregate {
  cost: Float
}

type InsuranceMinAggregate {
  id: ID
  name: String
  type: String
  cost: Float
  frequency: String
  description: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type InsuranceMaxAggregate {
  id: ID
  name: String
  type: String
  cost: Float
  frequency: String
  description: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type InsuranceAggregateResponse {
  count: InsuranceCountAggregate
  sum: InsuranceSumAggregate
  avg: InsuranceAvgAggregate
  min: InsuranceMinAggregate
  max: InsuranceMaxAggregate
}

type Recommendation {
  id: ID!
  membershipId: String!
  questionnarie: JSON!
  insurances: String!
  createdBy: String!
  updatedBy: String!
  deletedBy: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type RecommendationResponse {
  insurances: [Insurance!]!
}

type RecommendationCountAggregate {
  id: Int
  membershipId: Int
  questionnarie: Int
  insurances: Int
  createdBy: Int
  updatedBy: Int
  deletedBy: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type RecommendationMinAggregate {
  id: ID
  membershipId: String
  questionnarie: JSON
  insurances: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type RecommendationMaxAggregate {
  id: ID
  membershipId: String
  questionnarie: JSON
  insurances: String
  createdBy: String
  updatedBy: String
  deletedBy: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type Query {
  login(data: LoginInput!): LoginResponse!
  authorize(token: String!): AuthorizeResponse!
  logout(logout: Boolean!): Boolean!
  insurance(
    """The id of the record to find."""
    id: ID!
  ): Insurance
  insurances(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: InsuranceFilter = {}

    """Specify to sort results."""
    sorting: [InsuranceSort!] = []
  ): InsuranceConnection!
  insuranceAggregate(
    """Filter to find records to aggregate on"""
    filter: InsuranceAggregateFilter
  ): InsuranceAggregateResponse!
}

input LoginInput {
  userName: String!
}

input InsuranceFilter {
  and: [InsuranceFilter!]
  or: [InsuranceFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  type: StringFieldComparison
  public: BooleanFieldComparison
  cost: NumberFieldComparison
  frequency: StringFieldComparison
  description: StringFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
  deletedBy: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input InsuranceSort {
  field: InsuranceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InsuranceSortFields {
  id
  name
  type
  public
  cost
  frequency
  description
  createdBy
  updatedBy
  deletedBy
  createdAt
  updatedAt
  deletedAt
}

input InsuranceAggregateFilter {
  and: [InsuranceAggregateFilter!]
  or: [InsuranceAggregateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  type: StringFieldComparison
  public: BooleanFieldComparison
  cost: NumberFieldComparison
  frequency: StringFieldComparison
  description: StringFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
  deletedBy: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

type Mutation {
  signup(data: SignupInput!): SignupResponse!
  addMembershipsToClient(input: RelationsInput!): Client!
  removeMembershipsFromClient(input: RelationsInput!): Client!
  setClientOnMembership(input: RelationInput!): Membership!
  removeClientFromMembership(input: RelationInput!): Membership!
  createOneInsurance(input: CreateOneInsuranceInput!): Insurance!
  createManyInsurances(input: CreateManyInsurancesInput!): [Insurance!]!
  updateOneInsurance(input: UpdateOneInsuranceInput!): Insurance!
  updateManyInsurances(input: UpdateManyInsurancesInput!): UpdateManyResponse!
  deleteOneInsurance(input: DeleteOneInput!): DeleteOneResponse!
  deleteManyInsurances(input: DeleteManyInsurancesInput!): DeleteManyResponse!
  restoreOneInsurance(input: DeleteOneInput!): Insurance!
  restoreManyInsurances(input: InsuranceFilter!): UpdateManyResponse!
  getRecommendations(input: QuestionnarieInput!): RecommendationResponse!
}

input SignupInput {
  firstName: String!
  lastName: String!
  dateOfBirth: DateTime
  email: String!
  userName: String!
  phoneNumber: String!
}

input RelationsInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RelationInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneInsuranceInput {
  """The record to create"""
  insurance: InsuranceInput!
}

input InsuranceInput {
  name: String!
  type: String!
  public: Boolean
  cost: String!
  frequency: String!
  description: String!
  active: Boolean
}

input CreateManyInsurancesInput {
  """Array of records to create"""
  insurances: [InsuranceInput!]!
}

input UpdateOneInsuranceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InsuranceUpdate!
}

input InsuranceUpdate {
  name: String
  type: String
  public: Boolean
  cost: String
  frequency: String
  description: String
  active: Boolean
  deletedBy: String
  deletedAt: DateTime
}

input UpdateManyInsurancesInput {
  """Filter used to find fields to update"""
  filter: InsuranceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InsuranceUpdate!
}

input InsuranceUpdateFilter {
  and: [InsuranceUpdateFilter!]
  or: [InsuranceUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  type: StringFieldComparison
  public: BooleanFieldComparison
  cost: NumberFieldComparison
  frequency: StringFieldComparison
  description: StringFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
  deletedBy: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyInsurancesInput {
  """Filter to find records to delete"""
  filter: InsuranceDeleteFilter!
}

input InsuranceDeleteFilter {
  and: [InsuranceDeleteFilter!]
  or: [InsuranceDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  type: StringFieldComparison
  public: BooleanFieldComparison
  cost: NumberFieldComparison
  frequency: StringFieldComparison
  description: StringFieldComparison
  createdBy: StringFieldComparison
  updatedBy: StringFieldComparison
  deletedBy: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input QuestionnarieInput {
  firstName: String!
  address: QustionnarieAddressInput
  occupation: String!
  children: Boolean!
  childrenCount: Float
  email: String!
}

input QustionnarieAddressInput {
  street: String!
  externalNumber: String!
  internalNumber: String
  neighborhood: String
  zipCode: String!
  state: String!
  country: String!
}
